import os
import argparse
import avro.schema
from avro.datafile import DataFileReader, DataFileWriter
from avro.io import DatumReader, DatumWriter

def version():
    return 1

def generate_service_config(args, identifier, name, version, description, parameter, service_dir, service_schema, config_name, input_ports, output_ports):
    #Converting parameter tuples to param array
    params = []
    if parameter is not None:
        for p in parameter:
            param = {}
            param["key"] = p[0]
            param["name"] = p[1]
            param["parameterType"] = int(p[2])
            params.append(param)

    #Avro
    schema = avro.schema.parse(open(service_schema.name).read())
    writer = DataFileWriter(open(os.path.join(service_dir, config_name), "wb"), DatumWriter(), schema)
    writer.append({"id": identifier, "name": name, "version": version, "description": description, "inputPorts": input_ports, "outputPorts": output_ports, "params":params})
    writer.close()

def generate_service_script(service_dir, identifier, input_ports, output_ports, parameter_keys):
    script_file_path = os.path.join(service_dir, identifier + ".py") 
    script_file = open(script_file_path, 'w')
    disclaimer = "#This script has been generated by Peach Generator {}.\n#Rerunning Peach Generator on this script will lead to a loss of your added python code.\n\n".format(str(version()))
    script_file.write(disclaimer)
    ports = input_ports + parameter_keys
    # will be passed to the script
    arguments = ""
    for i in ports[:-1]:
        arguments += i + ", "
    else:
        arguments += ports[-1]
    # will be returned by the script
    return_values = ""
    for op in output_ports[:-1]:
        return_values += "[" + op + ", " + op + "_filename], "
    else:
        return_values += "[" + output_ports[-1] + ", " + output_ports[-1] + "_filename]"
    return_values += ""

    file_writing = "    import ServiceUtility\n"
    file_writing += "    import os\n"
    file_writing += "    import time\n"
    file_writing += "    import shutil\n"
    file_writing += "    unique_relative_output_dir = \"output_\" + str(time.time()).replace(\".\", \"\")\n"
    file_writing += "    dir_path = os.path.dirname(os.path.realpath(__file__))\n"
    file_writing += "    unique_output_dir = os.path.join(dir_path, unique_relative_output_dir)\n"
    file_writing += "    os.makedirs(unique_output_dir)\n\n"
    file_writing += "    #your output ports as output files\n\n"
    for op in output_ports:
        file_writing += "    {}_filename = \"{}.???\"\n".format(op, op)
        file_writing += "    {} = os.path.join(unique_output_dir, {}_filename)\n".format(op, op)
        file_writing += "    with open({}, \"w\") as {}_f:\n".format(op, op)
        file_writing += "        {}_f.write(\"This is the output of port \\\"{}\\\"\")\n\n".format(op, op)
    script_file.write("def start(c, {})".format(arguments) + ":")
    script_file.write("\n")
    script_file.write(file_writing)
    script_file.write("    print "'"Running {}"'"\n".format(identifier))
    script_file.write("    availableFiles = ServiceUtility.make_available(c, [{}])\n".format(return_values))
    script_file.write("    shutil.rmtree(unique_output_dir)\n")
    script_file.write("    return availableFiles\n")
    script_file.close()
    
def create_service_dir(service_dir, identifier, version):
    path = os.path.join(service_dir, identifier, "v" + str(version))
    if not os.path.isdir(path):
        os.makedirs(path)
    global_init_path = os.path.join(service_dir, identifier, "__init__.py")
    open(global_init_path, "a").close()
    version_init_path = os.path.join(service_dir, identifier, "v" + str(version), "__init__.py")
    open(version_init_path, "a").close()
    return path

if __name__ == '__main__':    
    parser = argparse.ArgumentParser(description='Generates a service.avro for a peach service.')
    parser.add_argument('-id', '--identifier', type=str, help="A string as unique identifer of the service.")
    parser.add_argument('-n', '--name', type=str, help="Human readable name, may contain whitespaces.")
    parser.add_argument('-v','--version', type=int, help="Version of the service.")
    parser.add_argument('-d', '--description', type=str, help="Description of the service.")
    parser.add_argument('-ip', '--input_ports', type=str, nargs='+', help="Input ports of the service.")
    parser.add_argument('-op', '--output_ports', type=str, nargs='+', help="Output ports of the service.")
    parser.add_argument('-p', '--parameter', type=str, nargs=3, help='Parameters of the service (key as string, name as string, type as int). If you want to pass more than one parameter you may add -p more than once.', action='append')
    parser.add_argument('-s', '--service_schema', type=file, help='Location of avro schema for services.')
    parser.add_argument('-sd', '--service_dir', type=str, help="Path to top level service directory.")
    parser.add_argument('-cn', '--config_name', type=str, default="service.config", help='Filename of the config file to be generated.')

    args = parser.parse_args()

    service_dir = create_service_dir(args.service_dir, args.identifier, args.version)
    parameter_keys = []
    if args.parameter is not None:
        for p in args.parameter:
            parameter_keys.append(p[0])
    generate_service_script(service_dir, args.identifier, args.input_ports, args.output_ports, parameter_keys)
    generate_service_config(args, args.identifier, args.name, args.version, args.description, args.parameter, service_dir, args.service_schema, args.config_name, args.input_ports, args.output_ports)
